{"version":3,"sources":["Sidebar.js","MyMap.js","App.js","index.js"],"names":["FullSidebar","styled","div","Sidebar","props","onClick","this","buttonClick","county","tdwg4_name","Component","require","token","styles","Map","ReactMapboxGl","accessToken","MyMap","state","center","lng","lat","mapStyle","light","geojsonData","getGeojson","zoom","map","regionData","onClickFill","bind","onEnter","onExit","handleButton","setState","geojsonTest","type","key","objects","gjn","topojson","property","stops","evt","clickObjId","features","properties","taxCount","x","console","log","OBJIDsic","bounds","bbox","geometry","fitBounds","linear","padding","speed","e","target","getCanvas","style","cursor","getStyle","layers","getLayoutProperty","setLayoutProperty","className","maxZoom","minZoom","maxBounds","dragRotate","pitchWithRotate","onStyleLoad","el","loadStyle","containerStyle","height","width","data","fillLayout","fillPaint","fillStyle","before","fillOnClick","fillOnMouseMove","fillOnMouseLeave","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03d434c4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst FullSidebar = styled.div`\r\n    width: 20%;\r\n    text-align: center;\r\n    height: 350px;\r\n    margin-top: 10px;\r\n    margin-left: 10px;\r\n    position: absolute;\r\n    background-color: whitesmoke;\r\n    border: 1px solid black;\r\n    z-index: 800;\r\n\r\n`\r\n\r\n\r\nclass Sidebar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <FullSidebar>\r\n                <button onClick={this.props.buttonClick}>Change Style</button>\r\n                <h1>{this.props.county}</h1>\r\n                <h4>{this.props.tdwg4_name}</h4>\r\n\r\n            </FullSidebar>\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Sidebar","import React, { useState, Component } from 'react'\r\nimport ReactMapboxGl, { GeoJSONLayer } from 'react-mapbox-gl';\r\nimport * as topojson from 'topojson-client';\r\nimport Sidebar from './Sidebar'\r\nimport bbox from '@turf/bbox'\r\nimport geojsonTest from './data/geojsons/glonaf_tax_join_topo.json'\r\nconst { token, styles } = require('./data/config.json')\r\n\r\nconst Map = ReactMapboxGl({\r\n    accessToken: token\r\n})\r\n\r\nexport default class MyMap extends Component {\r\n    constructor(props) {\r\n\r\n        super(props)\r\n\r\n        this.state = {\r\n            county: 'Tax Count',\r\n            tdwg4_name: 'TDWG4 Name',\r\n            center: {\r\n                lng: -71.627, //7.91\r\n                lat: 43.77 //50.85\r\n            },\r\n            mapStyle: styles.light,\r\n            geojsonData: this.getGeojson(),\r\n            zoom: [6],\r\n            map: null,\r\n            regionData: null,\r\n\r\n\r\n        }\r\n\r\n        this.onClickFill = this.onClickFill.bind(this);\r\n        this.onEnter = this.onEnter.bind(this)\r\n        this.onExit = this.onExit.bind(this)\r\n        this.handleButton = this.handleButton.bind(this)\r\n    }\r\n\r\n    loadStyle(map) {\r\n        this.setState({\r\n            map: map\r\n        })\r\n    }\r\n\r\n    getGeojson() {\r\n\r\n        if (geojsonTest.type === 'Topology') {\r\n            for (var key in geojsonTest.objects) {\r\n                var gjn = topojson.feature(geojsonTest, geojsonTest.objects[key]);\r\n            }\r\n            //console.log(gjn)\r\n            return gjn\r\n        } else {\r\n            return geojsonTest\r\n        }\r\n    }\r\n\r\n    fillStyle() {\r\n\r\n         return {\r\n             'fill-color': {\r\n \r\n                 property: 'taxCount',\r\n                 stops: [\r\n                     [146, \"#edf8fb\"],\r\n                     [409, \"#b2e2e2\"],\r\n                     [774, \"#66c2a4\"],\r\n                     [1233, \"#2ca25f\"]\r\n                 ]\r\n             },\r\n             'fill-opacity': 0.8,\r\n             'fill-outline-color': 'black'\r\n         }\r\n\r\n       /* return {\r\n            'fill-color': 'black',\r\n            'fill-opacity': 0.8,\r\n            'fill-outline-color': 'red'\r\n\r\n        } */\r\n    }\r\n\r\n\r\n\r\n    onClickFill(evt) {\r\n\r\n        //source: geojson-1\r\n\r\n        var clickObjId = evt.features[0].properties.taxCount;\r\n        //console.log(clickObjId);\r\n        console.log(evt.features[0])\r\n        for (var x in this.state.regionData) {\r\n            if (this.state.regionData[x].OBJIDsic == clickObjId) {\r\n                //console.log(this.state.regionData[x])\r\n                break;\r\n            }\r\n        }\r\n\r\n        var bounds = bbox(evt.features[0].geometry)\r\n\r\n        this.state.map.fitBounds(bounds, {\r\n            linear: true,\r\n            padding: 20,\r\n            speed: 0.8\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    onEnter(e) {\r\n\r\n        e.target.getCanvas().style.cursor = 'pointer'\r\n\r\n        this.setState({\r\n            county: 'Tax Count: ' + e.features[0].properties.taxCount,\r\n            tdwg4_name: 'TDWG4 Name: ' + e.features[0].properties.tdwg4_name\r\n        })\r\n    }\r\n\r\n    onExit(e) {\r\n\r\n        e.target.getCanvas().style.cursor = 'grab'\r\n\r\n        this.setState({\r\n            county: 'Tax Count',\r\n            tdwg4_name: 'TDWG4 Name'\r\n        })\r\n\r\n    }\r\n\r\n    handleButton(e) {\r\n\r\n\r\n\r\n        const geojLayer = this.state.map.getStyle().layers[74];\r\n\r\n        console.log(this.state.map.getLayoutProperty('geojson-1-fill', 'visibility'))\r\n\r\n        if (this.state.map.getLayoutProperty('geojson-1-fill', 'visibility') === 'visible') {\r\n\r\n            this.state.map.setLayoutProperty('geojson-1-fill', 'visibility', 'none');\r\n\r\n        } else {\r\n            this.state.map.setLayoutProperty('geojson-1-fill', 'visibility', 'visible');\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        //Region();\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Sidebar\r\n                    county={this.state.county}\r\n                    tdwg4_name={this.state.tdwg4_name}\r\n                    buttonClick={this.handleButton}>\r\n                       \r\n                </Sidebar>\r\n\r\n                <div className='Map'>\r\n\r\n                    <Map\r\n                        style={this.state.mapStyle}\r\n                        zoom={this.state.zoom}\r\n                        center={this.state.center}\r\n                        maxZoom={19}\r\n                        minZoom={3}\r\n                        maxBounds={[\r\n                            [-190, -90],\r\n                            [190, 90]\r\n                        ]}\r\n                        dragRotate={false}\r\n                        pitchWithRotate={false}\r\n                        onStyleLoad={el => this.loadStyle(el)}\r\n                        containerStyle={{\r\n                            height: \"100vh\",\r\n                            width: '100vw'\r\n                        }}\r\n\r\n                    >\r\n\r\n\r\n                        <GeoJSONLayer\r\n                            data={this.state.geojsonData}\r\n                            fillLayout={{\r\n                                'visibility': 'visible'\r\n                                \r\n                            }}\r\n                            fillPaint={this.fillStyle()}\r\n                            before='waterway-label'\r\n                            fillOnClick={this.onClickFill}\r\n                            fillOnMouseMove={this.onEnter}\r\n                            fillOnMouseLeave={this.onExit}\r\n                        />\r\n\r\n\r\n                    </Map>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}","import React from 'react';\nimport MyMap from './MyMap'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyMap />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}