{"version":3,"sources":["MyMap.js","App.js","index.js"],"names":["require","token","styles","Map","ReactMapboxGl","accessToken","MyMap","props","state","county","center","lng","lat","mapStyle","light","geojsonData","getGeojson","zoom","onClickFill","bind","onEnter","onExit","handleButton","geojsonTest","type","key","objects","gjn","topojson","property","stops","evt","console","log","features","geometry","e","target","getCanvas","style","cursor","this","setState","properties","taxCount","dark","className","onClick","containerStyle","height","width","data","fillPaint","fillStyle","before","fillOnClick","fillOnMouseMove","fillOnMouseLeave","Component","App","ReactDOM","render","document","getElementById"],"mappings":"qgBAM0BA,EAAQ,IAA1BC,E,EAAAA,MAAOC,E,EAAAA,OAETC,EAAMC,YAAc,CACtBC,YAAaJ,IAGIK,E,kDAEjB,WAAYC,GAAQ,IAAD,8BAEf,cAAMA,IAEDC,MAAQ,CACTC,OAAQ,YACRC,OAAQ,CACJC,KAAM,MACNC,IAAK,OAETC,SAAUX,EAAOY,MACjBC,YAAa,EAAKC,aAClBC,KAAM,CAAC,IAGX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,gBACd,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBAlBL,E,yDAyBf,GAAyB,aAArBI,EAAYC,KAAqB,CACjC,IAAK,IAAIC,KAAOF,EAAYG,QACxB,IAAIC,EAAMC,IAAiBL,EAAaA,EAAYG,QAAQD,IAGhE,OAAOE,EAEP,OAAOJ,I,kCAKV,MAAO,CACH,aAAc,CAEVM,SAAU,WACVC,MAAO,CACH,CAAC,IAAK,WACN,CAAC,IAAK,WACN,CAAC,IAAK,WACN,CAAC,KAAM,aAGf,eAAgB,GAChB,qBAAsB,S,kCAYnBC,GAGRC,QAAQC,IAAIF,EAAIG,SAAS,GAAGC,Y,8BAMxBC,GAEJA,EAAEC,OAAOC,YAAYC,MAAMC,OAAS,UAEpCC,KAAKC,SAAS,CACVjC,OAAQ,cAAgB2B,EAAEF,SAAS,GAAGS,WAAWC,a,6BAIlDR,GAEHA,EAAEC,OAAOC,YAAYC,MAAMC,OAAS,OAEpCC,KAAKC,SAAS,CACVjC,OAAQ,gB,qCAOZuB,QAAQC,IAAIQ,KAAKjC,MAAMK,UACnB4B,KAAKjC,MAAMK,WAAaX,EAAOY,MAC/B2B,KAAKC,SAAS,CACV7B,SAAUX,EAAO2C,OAGrBJ,KAAKC,SAAS,CACV7B,SAAUX,EAAOY,U,+BAUzB,OACI,6BACI,yBAAKgC,UAAU,WACX,4BAAQC,QAASN,KAAKnB,cAAtB,gBACA,4BAAKmB,KAAKjC,MAAMC,SAEpB,yBAAKqC,UAAU,OACX,kBAAC3C,EAAD,CACIoC,MAAOE,KAAKjC,MAAMK,SAClBI,KAAMwB,KAAKjC,MAAMS,KACjBP,OAAQ+B,KAAKjC,MAAME,OACnBsC,eAAgB,CACZC,OAAQ,OACRC,MAAO,SAIX,kBAAC,IAAD,CACIC,KAAMV,KAAKjC,MAAMO,YACjBqC,UAAWX,KAAKY,YAChBC,OAAO,iBACPC,YAAad,KAAKvB,YAClBsC,gBAAiBf,KAAKrB,QACtBqC,iBAAkBhB,KAAKpB,gB,GArIhBqC,aCCpBC,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCHNc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.06de45d8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactMapboxGl, { GeoJSONLayer } from 'react-mapbox-gl';\r\nimport * as topojson from 'topojson-client';\r\nimport geojsonTest from './data/geojsons/glonaf_tax.json'\r\n\r\n\r\nconst { token, styles } = require('./data/config.json')\r\n\r\nconst Map = ReactMapboxGl({\r\n    accessToken: token\r\n})\r\n\r\nexport default class MyMap extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props)\r\n\r\n        this.state = {\r\n            county: 'Tax Count',\r\n            center: {\r\n                lng: -71.77,\r\n                lat: 43.71\r\n            },\r\n            mapStyle: styles.light,\r\n            geojsonData: this.getGeojson(),\r\n            zoom: [6]\r\n        }\r\n\r\n        this.onClickFill = this.onClickFill.bind(this);\r\n        this.onEnter = this.onEnter.bind(this)\r\n        this.onExit = this.onExit.bind(this)\r\n        this.handleButton = this.handleButton.bind(this)\r\n\r\n    }\r\n\r\n\r\n    getGeojson() {\r\n\r\n        if (geojsonTest.type === 'Topology') {\r\n            for (var key in geojsonTest.objects) {\r\n                var gjn = topojson.feature(geojsonTest, geojsonTest.objects[key]);\r\n            }\r\n            //console.log(gjn)\r\n            return gjn\r\n        } else {\r\n            return geojsonTest\r\n        }\r\n    }\r\n\r\n    fillStyle() {\r\n         return {\r\n             'fill-color': {\r\n                         \r\n                 property: 'taxCount',\r\n                 stops: [\r\n                     [146, \"#edf8fb\"],\r\n                     [409, \"#b2e2e2\"],\r\n                     [774, \"#66c2a4\"],\r\n                     [1233, \"#2ca25f\"]\r\n                 ]\r\n         },\r\n             'fill-opacity': 0.8,\r\n             'fill-outline-color': 'red'\r\n         } \r\n\r\n       /* return {\r\n            'fill-color': 'blue',\r\n            'fill-opacity': 0.8,\r\n            'fill-outline-color': 'red'\r\n\r\n        } */\r\n    }\r\n\r\n\r\n    onClickFill(evt) {\r\n\r\n\r\n        console.log(evt.features[0].geometry)\r\n\r\n        \r\n    }\r\n\r\n\r\n    onEnter(e) {\r\n\r\n        e.target.getCanvas().style.cursor = 'pointer'\r\n\r\n        this.setState({\r\n            county: 'Tax Count: ' + e.features[0].properties.taxCount\r\n        })\r\n    }\r\n\r\n    onExit(e) {\r\n\r\n        e.target.getCanvas().style.cursor = 'grab'\r\n\r\n        this.setState({\r\n            county: 'Tax Count'\r\n        })\r\n\r\n    }\r\n\r\n    handleButton() {\r\n\r\n        console.log(this.state.mapStyle)\r\n        if( this.state.mapStyle === styles.light) {\r\n            this.setState({\r\n                mapStyle: styles.dark\r\n            })\r\n        } else {\r\n            this.setState({\r\n                mapStyle: styles.light\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"Sidebar\">\r\n                    <button onClick={this.handleButton}>Change Style</button>\r\n                    <h1>{this.state.county}</h1>\r\n                </div>\r\n                <div className='Map'>\r\n                    <Map\r\n                        style={this.state.mapStyle}\r\n                        zoom={this.state.zoom}\r\n                        center={this.state.center}\r\n                        containerStyle={{\r\n                            height: \"100%\",\r\n                            width: '100%'\r\n                        }}\r\n                    >\r\n\r\n                        <GeoJSONLayer\r\n                            data={this.state.geojsonData}\r\n                            fillPaint={this.fillStyle()}\r\n                            before='waterway-label'\r\n                            fillOnClick={this.onClickFill}\r\n                            fillOnMouseMove={this.onEnter}\r\n                            fillOnMouseLeave={this.onExit}\r\n                        />\r\n\r\n\r\n                    </Map>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}","import React from 'react';\nimport MyMap from './MyMap'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyMap />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}