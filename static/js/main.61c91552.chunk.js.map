{"version":3,"sources":["data/geojsons/islands.geojson","data/glonaf/tax-list1.txt","Sidebar.js","MyMap.js","mapUtils.js","App.js","index.js"],"names":["module","exports","tdwg1Names","value","label","FullSidebar","styled","div","Sidebar","props","onClick","this","buttonClick","county","tdwg4_name","options","onChange","dropChange","Component","require","token","styles","Map","ReactMapboxGl","accessToken","MyMap","state","center","lng","lat","mapStyle","myStyle","geojsonData","getGeojson","islands","zoom","map","regionData","bigFilter","taxList","matching","onClickFill","bind","onEnter","onExit","handleButton","handleDrop","setState","geojsonTest","type","key","objects","gjn","topojson","evt","regionId","features","properties","region_id","console","log","_","find","o","push","tpl_input","status","e","target","getCanvas","style","cursor","taxCount","getStyle","layers","getLayoutProperty","setLayoutProperty","setFilter","geojson_source_options","className","maxZoom","minZoom","maxBounds","dragRotate","pitchWithRotate","onStyleLoad","el","loadStyle","containerStyle","height","width","id","geoJsonSource","sourceId","before","paint","property","stops","layout","filter","onMouseMove","onMouseLeave","data","circlePaint","layerOptions","circleOnClick","circleOnMouseMove","circleOnMouseLeave","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61c91552.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/islands.fa0af21b.geojson\";","module.exports = __webpack_public_path__ + \"static/media/tax-list1.0b70a996.txt\";","import React, { Component } from 'react'\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css'\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\n\r\nconst tdwg1Names = [\r\n    {value: 'Africa', label: 'Africa'},\r\n    {value: 'Antarctic', label: 'Antarctic'}, \r\n    {value: 'Asia-Temperate', label: 'Asia-Temperate'},\r\n    {value: 'Asia-Tropical', label: 'Asia-Tropical'},\r\n    {value: 'Australasia', label: 'Australasia'},\r\n    {value: 'Europe', label: 'Europe'},\r\n    {value: 'mixed', label: 'mixed'},\r\n    {value: 'Northern America', label: 'Northern America'},\r\n    {value: 'Southern America', label: 'Southern America'},\r\n    {value: 'Pacific', label: 'Pacific'}\r\n]\r\n\r\nconst FullSidebar = styled.div`\r\n    width: 20%;\r\n    value-align: center;\r\n    height: 350px;\r\n    margin-top: 10px;\r\n    margin-left: 10px;\r\n    position: absolute;\r\n    background-color: whitesmoke;\r\n    border: 1px solid black;\r\n    z-index: 800;\r\n\r\n`\r\n\r\n\r\n\r\nclass Sidebar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n    }\r\n\r\n  \r\n\r\n    render() {\r\n\r\n        return (\r\n            <FullSidebar>\r\n                <button onClick={this.props.buttonClick}>Remove Layer</button>\r\n                <h1>{this.props.county}</h1>\r\n                <h4>{this.props.tdwg4_name}</h4>\r\n               {/* <p>{this.props.matching}</p> */}\r\n\r\n                <Dropdown\r\n                    options={tdwg1Names}\r\n                    value={tdwg1Names[0]}\r\n                    onChange={this.props.dropChange}\r\n                    ></Dropdown>\r\n            \r\n            </FullSidebar>\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Sidebar","import React, { Component } from 'react'\r\nimport ReactMapboxGl, { Source, Layer, GeoJSONLayer } from 'react-mapbox-gl';\r\nimport * as topojson from 'topojson-client';\r\nimport Sidebar from './Sidebar'\r\nimport bbox from '@turf/bbox'\r\nimport geojsonTest from './data/geojsons/region2wTax-topo.json'\r\nimport islands from './data/geojsons/islands.geojson'\r\nimport _ from 'lodash'\r\nimport * as d3 from 'd3'\r\nimport taxList from './data/glonaf/tax-list1.txt'\r\nimport { bigFill, smallFill, circleFill } from './mapUtils'\r\n\r\nconst { token, styles } = require('./data/config.json')\r\n\r\nconst Map = ReactMapboxGl({\r\n    accessToken: token\r\n})\r\n\r\n\r\nexport default class MyMap extends Component {\r\n    constructor(props) {\r\n\r\n        super(props)\r\n\r\n        this.state = {\r\n            county: 'Tax Count',\r\n            tdwg4_name: 'TDWG4 Name',\r\n            center: {\r\n                lng: -71.627, //7.91\r\n                lat: 43.77 //50.85\r\n            },\r\n            mapStyle: styles.myStyle,\r\n            geojsonData: this.getGeojson(),\r\n            islands: islands,\r\n            zoom: [2],\r\n            map: null,\r\n            regionData: null,\r\n            bigFilter: ['any',\r\n                ['>=', 'GeodAREA', 1639],\r\n                ['==', 'island', 0]\r\n            ],\r\n            taxList: null,\r\n            matching: [],\r\n\r\n\r\n\r\n        }\r\n\r\n        this.onClickFill = this.onClickFill.bind(this);\r\n        this.onEnter = this.onEnter.bind(this)\r\n        this.onExit = this.onExit.bind(this)\r\n        this.handleButton = this.handleButton.bind(this)\r\n        this.handleDrop = this.handleDrop.bind(this)\r\n    }\r\n\r\n\r\n    loadStyle(map) {\r\n\r\n        this.setState({\r\n            map: map\r\n        })\r\n\r\n        const self = this;\r\n        /* d3.dsv('\\t', taxList).then((data) => {\r\n             self.setState({\r\n                 map: map,\r\n                 taxList: data\r\n             })\r\n         }) */\r\n\r\n    }\r\n\r\n    getGeojson() {\r\n\r\n        if (geojsonTest.type === 'Topology') {\r\n            for (var key in geojsonTest.objects) {\r\n                var gjn = topojson.feature(geojsonTest, geojsonTest.objects[key]);\r\n            }\r\n            //console.log(gjn)\r\n            return gjn\r\n        } else {\r\n            return geojsonTest\r\n        }\r\n    }\r\n\r\n    onClickFill(evt) {\r\n\r\n        //source: geojson-1\r\n\r\n        var regionId = evt.features[0].properties.region_id;\r\n        console.log(regionId);\r\n\r\n        //console.log(this.state.taxList[5]);\r\n        var matching = [];\r\n\r\n        _.find(this.state.taxList, function (o) {\r\n            if (o.region_id == regionId) {\r\n                matching.push([o.tpl_input, o.status]);\r\n\r\n            }\r\n        })\r\n\r\n        console.log(matching);\r\n\r\n        this.setState({\r\n            matching: matching\r\n        })\r\n\r\n\r\n        //console.log(evt.features[0].properties.GeodAREA);\r\n        //console.log(evt.features[0])\r\n        /*  for (var x in this.state.regionData) {\r\n              if (this.state.regionData[x].OBJIDsic == clickObjId) {\r\n                  //console.log(this.state.regionData[x])\r\n                  break;\r\n              }\r\n          } */\r\n\r\n        /* var bounds = bbox(evt.features[0].geometry)\r\n \r\n         this.state.map.fitBounds(bounds, {\r\n             linear: true,\r\n             padding: 20,\r\n             speed: 0.8\r\n         }); */\r\n\r\n    }\r\n\r\n\r\n    onEnter(e) {\r\n\r\n        e.target.getCanvas().style.cursor = 'pointer'\r\n        //console.log(this.state.map.getZoom());\r\n        this.setState({\r\n            county: 'Tax Count: ' + e.features[0].properties.taxCount,\r\n            tdwg4_name: 'TDWG4 Name: ' + e.features[0].properties.tdwg4_name\r\n        })\r\n    }\r\n\r\n    onExit(e) {\r\n\r\n        e.target.getCanvas().style.cursor = 'grab'\r\n\r\n        this.setState({\r\n            county: 'Tax Count',\r\n            tdwg4_name: 'TDWG4 Name'\r\n        })\r\n\r\n    }\r\n\r\n    handleButton(e) {\r\n        const geojLayer = this.state.map.getStyle().layers[74];\r\n\r\n        console.log(this.state.map.getLayoutProperty('glonafAreas', 'visibility'))\r\n        //console.log(this.state.map.getStyle().layers)\r\n        if (this.state.map.getLayoutProperty('glonafAreas', 'visibility') === 'visible') {\r\n\r\n            this.state.map.setLayoutProperty('glonafAreas', 'visibility', 'none');\r\n\r\n        } else {\r\n            this.state.map.setLayoutProperty('glonafAreas', 'visibility', 'visible');\r\n        }\r\n    }\r\n\r\n    handleDrop(e) {\r\n        console.log(e)\r\n\r\n        //console.log(this.state.map.getStyle().layers);\r\n        this.state.map.setFilter('glonafAreas', ['==', 'tdwg1_name', e.value]);\r\n        this.state.map.setFilter('glonafAreasSmall', ['==', 'tdwg1_name', e.value]);\r\n        this.state.map.setFilter('geojson-1-circle', ['==', 'tdwg1_name', e.value]);\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        const geojson_source_options = {\r\n            \"type\": \"geojson\",\r\n            \"data\": this.state.geojsonData\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Sidebar\r\n                    county={this.state.county}\r\n                    tdwg4_name={this.state.tdwg4_name}\r\n                    buttonClick={this.handleButton}\r\n                    //matching={this.state.matching}\r\n                    dropChange={this.handleDrop}\r\n\r\n                >\r\n\r\n                </Sidebar>\r\n\r\n                <Map\r\n                    className='Map'\r\n                    style={this.state.mapStyle}\r\n                    zoom={this.state.zoom}\r\n                    center={this.state.center}\r\n                    maxZoom={19}\r\n                    minZoom={3}\r\n                    maxBounds={[\r\n                        [-190, -90],\r\n                        [190, 90]\r\n                    ]}\r\n                    dragRotate={false}\r\n                    pitchWithRotate={false}\r\n                    onStyleLoad={el => this.loadStyle(el)}\r\n                    containerStyle={{\r\n                        height: \"100vh\",\r\n                        width: '100vw'\r\n                    }}\r\n                >\r\n\r\n                    <Source id='geojsonSource' geoJsonSource={geojson_source_options} />\r\n                    <Layer\r\n                        id='glonafAreas'\r\n                        type='fill'\r\n                        sourceId='geojsonSource'\r\n                        before='waterway-label'\r\n                        paint={bigFill()}\r\n                        layout={{\r\n                            'visibility': 'visible'\r\n                        }}\r\n                        filter={this.state.bigFilter}\r\n                        onMouseMove={this.onEnter}\r\n                        onMouseLeave={this.onExit}\r\n                        onClick={this.onClickFill}\r\n                    />\r\n\r\n                    <Layer\r\n                        id='glonafAreasSmall'\r\n                        type='fill'\r\n                        sourceId='geojsonSource'\r\n                        before='waterway-label'\r\n                        minZoom={4}\r\n                        paint={smallFill()}\r\n                        filter={\r\n                            ['all',\r\n                                ['<', 'GeodAREA', 1639],\r\n                                ['==', 'island', 1]\r\n                            ]\r\n                        }\r\n                        onMouseMove={this.onEnter}\r\n                        onMouseLeave={this.onExit}\r\n\r\n                    />\r\n\r\n                    <GeoJSONLayer\r\n                        data={this.state.islands}\r\n                        circlePaint={circleFill()}\r\n                        layerOptions={{\r\n                            'maxzoom': 4\r\n                        }}\r\n                        circleOnClick={this.onClickFill}\r\n                        circleOnMouseMove={this.onEnter}\r\n                        circleOnMouseLeave={this.onExit}\r\n                    />\r\n\r\n\r\n                    {/*  <GeoJSONLayer\r\n                            data={this.state.geojsonData}\r\n                            layerOptions={{\r\n                                //'filter': ['==', 'island', 1]\r\n                                //'filter': ['>=', 'GeodAREA', 1639]\r\n                            }}\r\n                            fillLayout={{\r\n                                'visibility': 'visible'\r\n                                \r\n                            }}\r\n                            \r\n                            fillPaint={this.fillStyle()}\r\n                            before='waterway-label'\r\n                            fillOnClick={this.onClickFill}\r\n                            fillOnMouseMove={this.onEnter}\r\n                            fillOnMouseLeave={this.onExit}\r\n                        /> */}\r\n                </Map>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}","export const fillColorScheme = () => {\r\n\r\n    return {\r\n        property: 'taxCount',\r\n        stops: [\r\n            [146, \"#edf8fb\"],\r\n            [409, \"#b2e2e2\"],\r\n            [774, \"#66c2a4\"],\r\n            [1233, \"#2ca25f\"]\r\n        ]\r\n    }\r\n\r\n}\r\n\r\nexport const circleFill = () => {\r\n    return {\r\n        'circle-radius': 4.0,\r\n        'circle-color': fillColorScheme(),\r\n        \"circle-stroke-width\": 1,\r\n        \"circle-stroke-color\": 'black'\r\n\r\n        }\r\n}\r\n\r\nexport const bigFill = () => {\r\n    return {\r\n\r\n        'fill-color': fillColorScheme(),\r\n        'fill-opacity': 0.8,\r\n        'fill-outline-color': 'black'\r\n    }\r\n\r\n}\r\n\r\nexport const smallFill = () => {\r\n    return {\r\n        'fill-color': fillColorScheme(),\r\n        'fill-outline-color': 'black'\r\n\r\n    }\r\n}\r\n","import React from 'react';\nimport MyMap from './MyMap'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyMap />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}