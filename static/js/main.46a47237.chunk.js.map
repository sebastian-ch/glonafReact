{"version":3,"sources":["data/geojsons/islands.geojson","data/glonaf/tax-list-filter1.txt","PlantDropdown.js","Sidebar.js","Legend.js","MyMap.js","mapUtils.js","App.js","index.js"],"names":["module","exports","PlantDropdown","props","options","this","taxon","value","onChange","plantDropChange","Component","tdwg1Names","label","ToggleButtons","styled","button","References","div","FullSidebar","Sidebar","style","marginBottom","tdwg4_name","marginTop","county","onClick","buttonClick","addPopDen","addCompleteness","completenessWords","width","dropChange","className","Legend","checkLayer","background","require","token","styles","centers","Map","colors","ReactMapboxGl","accessToken","MyMap","state","center","lng","lat","mapStyle","mySimpleStyle","geojsonData","getGeojson","islands","zoom","map","regionData","bigFilter","smallFilter","taxList","matching","inventoryView","inventoryButton","onClickFill","bind","onEnter","onExit","handleButton","addDensPop","handleDrop","handlePlantDrop","self","d3","then","data","setState","geojsonTest","type","key","objects","gjn","topojson","evt","console","log","features","regionId","properties","region_id","_","find","o","push","tpl_input","status","bounds","bbox","geometry","fitBounds","linear","padding","speed","e","target","getCanvas","cursor","taxCount","getStyle","layers","getLayoutProperty","setLayoutProperty","colorScheme","setPaintProperty","property","stops","setFilter","flyTo","selectedPlant","alienOrNot","standardized_name","Number","toString","filter1","uniq","geojson_source_options","Set","i","maxZoom","minZoom","dragRotate","pitchWithRotate","onStyleLoad","el","loadStyle","containerStyle","height","id","geoJsonSource","sourceId","paint","layout","filter","onMouseMove","onMouseLeave","circlePaint","layerOptions","circleLayout","circleOnMouseMove","circleOnMouseLeave","tileJsonSource","before","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46a47237.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/islands.fa0af21b.geojson\";","module.exports = __webpack_public_path__ + \"static/media/tax-list-filter1.df531f6e.txt\";","import React, { Component } from 'react'\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css'\r\n\r\n\r\nclass PlantDropdown extends Component {\r\n\r\n        constructor(props) {\r\n            super(props)\r\n\r\n\r\n\r\n        }\r\n\r\n    render() {\r\n        return(\r\n            <Dropdown\r\n                options={this.props.taxon}\r\n                value={'Select Plant'}\r\n                onChange={this.props.plantDropChange}\r\n                \r\n            ></Dropdown>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PlantDropdown","import React, { Component } from 'react'\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css'\r\nimport PlantDropdown from './PlantDropdown'\r\nimport styled from 'styled-components'\r\n\r\nconst tdwg1Names = [\r\n    { value: null, label: 'All' },\r\n    { value: 'Africa', label: 'Africa' },\r\n    { value: 'Antarctic', label: 'Antarctic' },\r\n    { value: 'Asia-Temperate', label: 'Asia-Temperate' },\r\n    { value: 'Asia-Tropical', label: 'Asia-Tropical' },\r\n    { value: 'Australasia', label: 'Australasia' },\r\n    { value: 'Europe', label: 'Europe' },\r\n    { value: 'mixed', label: 'mixed' },\r\n    { value: 'Northern America', label: 'Northern America' },\r\n    { value: 'Southern America', label: 'Southern America' },\r\n    { value: 'Pacific', label: 'Pacific' }\r\n]\r\n\r\nconst ToggleButtons = styled.button`\r\n    border: 1px solid black;\r\n    background-color: 'red';\r\n    padding: 10px 10px;\r\n    text-align: center;\r\n\r\n    &:hover {\r\n        opacity: 0.5;\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nconst References = styled.div`\r\n    border: 1px solid black;\r\n    text-align: center;\r\n    padding-bottom: 80px;\r\n    padding-top: 10px;\r\n    width: 80%;\r\n    margin: 10px auto;\r\n\r\n`\r\n\r\nconst FullSidebar = styled.div`\r\n    text-align: center;\r\n    width: 20%;\r\n    value-align: center;\r\n    height: 100%;\r\n    /*margin-top: 10px;\r\n    margin-left: 10px; */\r\n    position: absolute;\r\n    background-color: whitesmoke;\r\n    border-right: 1px solid black;\r\n    z-index: 800;\r\n\r\n`\r\n\r\n\r\n\r\nclass Sidebar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <FullSidebar>\r\n                <h1>GloNAF Interactive Atlas</h1>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <h1 style={{marginBottom: '0'}}>{this.props.tdwg4_name}</h1>\r\n                <h1 style={{marginTop: '0'}}>{this.props.county}</h1>\r\n                \r\n                {/* <p>{this.props.matching}</p> */}\r\n\r\n\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                \r\n              \r\n                <ToggleButtons onClick={this.props.buttonClick}>Remove GloNAF Layer</ToggleButtons>\r\n                <br></br>\r\n                <ToggleButtons onClick={this.props.addPopDen}>Add Population Density Layer</ToggleButtons>\r\n                <br></br>\r\n                <ToggleButtons onClick={this.props.addCompleteness}>{this.props.completenessWords}</ToggleButtons>\r\n                <br></br>\r\n                <br></br>\r\n                <Dropdown\r\n                    style={{width:'80%'}}\r\n                    options={tdwg1Names}\r\n                    value={\"Select Continent\"}\r\n                    onChange={this.props.dropChange}\r\n                ></Dropdown>\r\n                <PlantDropdown\r\n                    className='dropdown'\r\n                    taxon={this.props.taxon}\r\n                    plantDropChange={this.props.plantDropChange}\r\n                ></PlantDropdown>\r\n\r\n                <References>References and External Links will go here</References>\r\n            </FullSidebar>\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Sidebar","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport './legend.css'\r\n\r\n\r\n\r\n\r\nclass Legend extends Component {\r\n\r\n    render() {\r\n        if (this.props.checkLayer) {\r\n            return(\r\n                <div className='legend'>\r\n                <h3>Inventory Completeness</h3>\r\n                <span style={{background: '#eeb479'}}></span>\r\n                <label>Likely very incomplete</label>\r\n                <span style={{background: '#e9e29c'}}></span>\r\n                <label>Likely incomplete</label>\r\n                <span style={{background: '#9ccb86'}}></span>\r\n                <label>Likely nearly complete</label>\r\n                \r\n            </div>\r\n            )\r\n        } else {\r\n\r\n        \r\n        return(\r\n            <div className='legend'>\r\n                <h3># of Taxa</h3>\r\n                <span style={{background: \"#edf8fb\"}}></span>\r\n                <label>146</label>\r\n                <span style={{background: \"#b2e2e2\"}}></span>\r\n                <label>409</label>\r\n                <span style={{background: \"#66c2a4\"}}></span>\r\n                <label>774</label>\r\n                <span style={{background: \"#2ca25f\"}}></span>\r\n                <label>1233</label>\r\n                <span style={{background: \"#006d2c\"}}></span>\r\n                <label>3301</label>\r\n            </div>\r\n        )\r\n    }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Legend","import React, { Component } from 'react'\r\nimport ReactMapboxGl, { Source, Layer, GeoJSONLayer } from 'react-mapbox-gl';\r\nimport * as topojson from 'topojson-client';\r\nimport Sidebar from './Sidebar'\r\nimport Legend from './Legend'\r\nimport bbox from '@turf/bbox'\r\nimport geojsonTest from './data/geojsons/region2wTaxCompleteness.json'\r\nimport islands from './data/geojsons/islands.geojson'\r\nimport _ from 'lodash'\r\nimport * as d3 from 'd3'\r\nimport taxList from './data/glonaf/tax-list-filter1.txt'\r\nimport { bigFill, smallFill, circleFill, fillColorScheme } from './mapUtils'\r\n\r\nconst { token, styles, centers, colors } = require('./data/config.json')\r\n\r\nconst Map = ReactMapboxGl({\r\n    accessToken: token\r\n})\r\n\r\n\r\nexport default class MyMap extends Component {\r\n    constructor(props) {\r\n\r\n        super(props)\r\n\r\n        this.state = {\r\n            tdwg4_name: 'Hover for',\r\n            county: 'Information',\r\n            center: {\r\n                lng: -13, //7.91\r\n                lat: 32 //50.85\r\n            },\r\n            mapStyle: styles.mySimpleStyle,\r\n            geojsonData: this.getGeojson(),\r\n            islands: islands,\r\n            zoom: [1.5],\r\n            map: null,\r\n            regionData: null,\r\n            bigFilter: ['any',\r\n                ['>=', 'GeodAREA', 1639],\r\n                ['==', 'island', 0]\r\n            ],\r\n            smallFilter: ['all', ['<', 'GeodAREA', 1639], ['==', 'island', 1]],\r\n            taxList: [],\r\n            matching: [],\r\n            inventoryView: false,\r\n            inventoryButton: 'Inventory Completeness'\r\n\r\n        }\r\n\r\n        this.onClickFill = this.onClickFill.bind(this);\r\n        this.onEnter = this.onEnter.bind(this)\r\n        this.onExit = this.onExit.bind(this)\r\n        this.handleButton = this.handleButton.bind(this)\r\n        this.addDensPop = this.addDensPop.bind(this)\r\n        this.addCompleteness = this.addCompleteness.bind(this)\r\n        this.handleDrop = this.handleDrop.bind(this)\r\n        this.handlePlantDrop = this.handlePlantDrop.bind(this);\r\n    }\r\n\r\n\r\n    loadStyle(map) {\r\n\r\n        /*  this.setState({\r\n              map: map\r\n          }) */\r\n\r\n        const self = this;\r\n        d3.dsv('\\t', taxList).then((data) => {\r\n            self.setState({\r\n                map: map,\r\n                taxList: data\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    getGeojson() {\r\n\r\n        if (geojsonTest.type === 'Topology') {\r\n            for (var key in geojsonTest.objects) {\r\n                var gjn = topojson.feature(geojsonTest, geojsonTest.objects[key]);\r\n            }\r\n            //console.log(gjn)\r\n            return gjn\r\n        } else {\r\n            return geojsonTest\r\n        }\r\n    }\r\n\r\n    onClickFill(evt) {\r\n\r\n        //source: geojson-1\r\n        console.log(evt.features[0])\r\n        var regionId = evt.features[0].properties.region_id;\r\n        console.log(regionId);\r\n\r\n        //console.log(this.state.taxList[5]);\r\n        var matching = [];\r\n\r\n        _.find(this.state.taxList, function (o) {\r\n            if (o.region_id == regionId) {\r\n                matching.push([o.tpl_input, o.status]);\r\n\r\n            }\r\n        })\r\n\r\n        console.log(matching);\r\n\r\n        this.setState({\r\n            matching: matching\r\n        })\r\n\r\n\r\n        //console.log(evt.features[0].properties.GeodAREA);\r\n        //console.log(evt.features[0])\r\n        /*  for (var x in this.state.regionData) {\r\n              if (this.state.regionData[x].OBJIDsic == clickObjId) {\r\n                  //console.log(this.state.regionData[x])\r\n                  break;\r\n              }\r\n          } */\r\n\r\n        var bounds = bbox(evt.features[0].geometry)\r\n\r\n        this.state.map.fitBounds(bounds, {\r\n            linear: true,\r\n            padding: 40,\r\n            speed: 0.8\r\n        });\r\n\r\n    }\r\n\r\n\r\n    onEnter(e) {\r\n\r\n        e.target.getCanvas().style.cursor = 'pointer'\r\n\r\n        //console.log(this.state.map.getZoom());\r\n        this.setState({\r\n            county: 'Taxa Count: ' + e.features[0].properties.taxCount,\r\n            tdwg4_name: e.features[0].properties.tdwg4_name //'TDWG4 Name: ' + e.features[0].properties.tdwg4_name\r\n        })\r\n    }\r\n\r\n    onExit(e) {\r\n\r\n        e.target.getCanvas().style.cursor = 'grab'\r\n\r\n        this.setState({\r\n            tdwg4_name: 'Hover for',\r\n            county: 'Information'\r\n        })\r\n\r\n    }\r\n\r\n    handleButton(e) {\r\n        console.log(this.state.map.getStyle().layers)\r\n        const geojLayer = this.state.map.getStyle().layers[74];\r\n\r\n        console.log(this.state.map.getLayoutProperty('glonafAreas', 'visibility'))\r\n        //console.log(this.state.map.getStyle().layers)\r\n\r\n        if (this.state.map.getLayoutProperty('glonafAreas', 'visibility') === 'visible') {\r\n\r\n            this.state.map.setLayoutProperty('glonafAreas', 'visibility', 'none');\r\n            this.state.map.setLayoutProperty('glonafAreasSmall', 'visibility', 'none');\r\n            this.state.map.setLayoutProperty('geojson-1-circle', 'visibility', 'none');\r\n\r\n\r\n\r\n        } else {\r\n            this.state.map.setLayoutProperty('glonafAreas', 'visibility', 'visible');\r\n            this.state.map.setLayoutProperty('glonafAreasSmall', 'visibility', 'visible');\r\n            this.state.map.setLayoutProperty('geojson-1-circle', 'visibility', 'visible');\r\n        }\r\n    }\r\n\r\n    addDensPop(e) {\r\n        console.log(this.state.map.getLayoutProperty('popdense_layer', 'visibility'))\r\n        if (this.state.map.getLayoutProperty('popdense_layer', 'visibility') === 'none') {\r\n\r\n            this.state.map.setLayoutProperty('popdense_layer', 'visibility', 'visible');\r\n\r\n        } else {\r\n            this.state.map.setLayoutProperty('popdense_layer', 'visibility', 'none');\r\n        }\r\n    }\r\n\r\n    addCompleteness(e) {\r\n\r\n        const colorScheme = [\r\n            'match',\r\n            ['get', 'completeness'],\r\n            1, '#eeb479',//'#fc8d59',\r\n            2, '#e9e29c', //'#ffffbf',\r\n            3, '#9ccb86',//'#99d594',\r\n            'purple'\r\n        ]\r\n\r\n        if (!this.state.inventoryView) {\r\n            this.setState({\r\n                inventoryView: true,\r\n                inventoryButton: 'Taxon Count View'\r\n            })\r\n            this.state.map.setPaintProperty('glonafAreas', 'fill-color', colorScheme)\r\n            this.state.map.setPaintProperty('glonafAreasSmall', 'fill-color', colorScheme)\r\n            //this.state.map.setPaintProperty('geojson-1-circle', 'circle-color', colorScheme)\r\n            this.state.map.setLayoutProperty('geojson-1-circle', 'visibility', 'none');\r\n        } else {\r\n\r\n            this.setState({\r\n                inventoryView: false,\r\n                inventoryButton: 'Inventory Completeness'\r\n\r\n            })\r\n            this.state.map.setPaintProperty('glonafAreas', 'fill-color', fillColorScheme())\r\n            this.state.map.setPaintProperty('glonafAreasSmall', 'fill-color', fillColorScheme())\r\n            this.state.map.setLayoutProperty('geojson-1-circle', 'visibility', 'visible');\r\n            //this.state.map.setPaintProperty('geojson-1-circle', 'circle-color', fillColorScheme())\r\n        }\r\n\r\n    }\r\n\r\n    handleDrop(e) {\r\n        //console.log(e)\r\n\r\n        if (e.value === null) {\r\n            this.state.map.setFilter('glonafAreas', this.state.bigFilter);\r\n            this.state.map.setFilter('glonafAreasSmall', this.state.smallFilter);\r\n            this.state.map.setFilter('geojson-1-circle', e.value);\r\n\r\n            this.state.map.flyTo({\r\n                center: this.state.map.center\r\n            })\r\n        }\r\n        else {\r\n            //console.log(this.state.map.getStyle().layers);\r\n            this.state.map.setFilter('glonafAreas', ['==', 'tdwg1_name', e.value]);\r\n            this.state.map.setFilter('glonafAreasSmall', ['==', 'tdwg1_name', e.value]);\r\n            this.state.map.setFilter('geojson-1-circle', ['==', 'tdwg1_name', e.value]);\r\n\r\n            this.state.map.flyTo({\r\n                center: centers[e.value]\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handlePlantDrop(e) {\r\n        let selectedPlant = e.value\r\n        var matching = []\r\n        var alienOrNot = {}\r\n        console.log(e);\r\n\r\n        if (e.value === 'all') {\r\n\r\n            this.state.map.setFilter('glonafAreas', this.state.bigFilter);\r\n            this.state.map.setFilter('glonafAreasSmall', this.state.smallFilter);\r\n            this.state.map.setFilter('geojson-1-circle', null);\r\n\r\n            this.state.map.setPaintProperty(\r\n                'glonafAreas',\r\n                'fill-outline-color',\r\n                'black'\r\n            )\r\n\r\n        } else {\r\n\r\n\r\n\r\n\r\n            _.find(this.state.taxList, function (o) {\r\n                if (o.standardized_name == selectedPlant) {\r\n\r\n                    matching.push(Number(o.region_id))\r\n                    if (o.status == 'alien') {\r\n                        alienOrNot[o.region_id.toString()] = 'red'\r\n                    } else {\r\n                        alienOrNot[o.region_id.toString()] = 'blue'\r\n                    }\r\n                }\r\n            })\r\n\r\n            console.log(alienOrNot);\r\n            //console.log(this.state.map.getStyle().layers[13])\r\n\r\n            var filter1 = [\"match\",\r\n                ['get', \"region_id\"],\r\n                _.uniq(matching),\r\n                true,\r\n                false\r\n            ];\r\n\r\n            this.state.map.setFilter('glonafAreas', filter1);\r\n            this.state.map.setFilter('glonafAreasSmall', filter1);\r\n            this.state.map.setFilter('geojson-1-circle', filter1);\r\n\r\n\r\n            console.log(alienOrNot['791'])\r\n\r\n\r\n            this.state.map.setPaintProperty(\r\n                'glonafAreas',\r\n                'fill-outline-color',\r\n                'red'\r\n                /* ['get',\r\n                    ['string', ['get', 'region_id']],\r\n                    ['literal', alienOrNot]\r\n                ] */\r\n\r\n            )\r\n\r\n            /*      this.state.map.setPaintProperty(\r\n                      'glonafAreasSmall',\r\n                      'fill-outline-color',\r\n                  )\r\n                  this.state.map.setPaintProperty(\r\n                      'geojson-1-circle',\r\n                      'circle-stroke-color',\r\n                      getColor()\r\n                  ) */\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const geojson_source_options = {\r\n            \"type\": \"geojson\",\r\n            \"data\": this.state.geojsonData\r\n        }\r\n\r\n        //console.log([...new Set(this.state.taxList.map(i => i.tpl_input))]);\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Sidebar\r\n                    county={this.state.county}\r\n                    tdwg4_name={this.state.tdwg4_name}\r\n                    buttonClick={this.handleButton}\r\n                    addPopDen={this.addDensPop}\r\n                    addCompleteness={this.addCompleteness}\r\n                    completenessWords={this.state.inventoryButton}\r\n                    //matching={this.state.matching}\r\n                    dropChange={this.handleDrop}\r\n                    taxon={[...new Set(this.state.taxList.map(i => i.standardized_name))]}\r\n                    plantDropChange={this.handlePlantDrop}\r\n                >\r\n\r\n                </Sidebar>\r\n\r\n                <Map\r\n                    className='Map'\r\n                    style={this.state.mapStyle}\r\n                    zoom={this.state.zoom}\r\n                    center={this.state.center}\r\n                    maxZoom={16}\r\n                    minZoom={3}\r\n                    /* maxBounds={[\r\n                        [-190, -90],\r\n                        [190, 90]\r\n                    ]} */\r\n                    dragRotate={false}\r\n                    pitchWithRotate={false}\r\n                    onStyleLoad={el => this.loadStyle(el)}\r\n                    containerStyle={{\r\n                        height: \"100vh\",\r\n                        width: '100vw'\r\n                    }}\r\n                >\r\n\r\n\r\n                    <Source id='geojsonSource' geoJsonSource={geojson_source_options} />\r\n                    <Layer\r\n                        id='glonafAreas'\r\n                        type='fill'\r\n                        sourceId='geojsonSource'\r\n                        //before='waterway-label'\r\n                        paint={bigFill()}\r\n                        layout={{\r\n                            'visibility': 'visible'\r\n                        }}\r\n                        filter={this.state.bigFilter}\r\n                        onMouseMove={this.onEnter}\r\n                        onMouseLeave={this.onExit}\r\n                        onClick={this.onClickFill}\r\n                    />\r\n\r\n                    <Layer\r\n                        id='glonafAreasSmall'\r\n                        type='fill'\r\n                        sourceId='geojsonSource'\r\n                        //before='waterway-label'\r\n                        minZoom={4}\r\n                        paint={smallFill()}\r\n                        layout={{\r\n                            'visibility': 'visible'\r\n                        }}\r\n                        filter={this.state.smallFilter}\r\n                        onMouseMove={this.onEnter}\r\n                        onMouseLeave={this.onExit}\r\n                    //onClick={this.onClickFill}\r\n\r\n                    />\r\n\r\n                    <GeoJSONLayer\r\n                        data={this.state.islands}\r\n                        circlePaint={circleFill()}\r\n                        layerOptions={{\r\n                            'maxzoom': 4\r\n                        }}\r\n                        circleLayout={{\r\n                            'visibility': 'visible'\r\n                        }}\r\n                        //circleOnClick={this.onClickFill}\r\n                        circleOnMouseMove={this.onEnter}\r\n                        circleOnMouseLeave={this.onExit}\r\n                    />\r\n\r\n                    <Source id='popDense' tileJsonSource={{\r\n                        \"type\": \"raster\",\r\n                        'tiles': [\r\n                            'http://tile.casa.ucl.ac.uk/duncan/WorldPopDen2015b/{z}/{x}/{y}.png'\r\n                        ],\r\n                        \"tileSize\": 256\r\n\r\n                    }} />\r\n                    <Layer\r\n                        type='raster'\r\n                        id='popdense_layer'\r\n                        sourceId=\"popDense\"\r\n                        before=\"glonafAreas\"\r\n                        layout={{\r\n                            'visibility': 'none'\r\n                        }} />\r\n\r\n\r\n                    {/*  <GeoJSONLayer\r\n                            data={this.state.geojsonData}\r\n                            layerOptions={{\r\n                                //'filter': ['==', 'island', 1]\r\n                                //'filter': ['>=', 'GeodAREA', 1639]\r\n                            }}\r\n                            fillLayout={{\r\n                                'visibility': 'visible'\r\n                                \r\n                            }}\r\n                            \r\n                            fillPaint={this.fillStyle()}\r\n                            before='waterway-label'\r\n                            fillOnClick={this.onClickFill}\r\n                            fillOnMouseMove={this.onEnter}\r\n                            fillOnMouseLeave={this.onExit}\r\n                        /> */}\r\n                    <Legend checkLayer={this.state.inventoryView}></Legend>\r\n                </Map>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}","export const fillColorScheme = () => {\r\n\r\n    return {\r\n        property: 'taxCount',\r\n        stops: [\r\n            [146, \"#edf8fb\"],\r\n            [409, \"#b2e2e2\"],\r\n            [774, \"#66c2a4\"],\r\n            [1233, \"#2ca25f\"],\r\n            [3301, \"#006d2c\"]\r\n\r\n        ]\r\n      /*  stops: [\r\n            [146, \"#edf8fb\"],\r\n            [409, \"#b2e2e2\"],\r\n            [774, \"#66c2a4\"],\r\n            [1233, \"#2ca25f\"]\r\n        ] */\r\n    }\r\n\r\n}\r\n\r\nexport const circleFill = () => {\r\n    return {\r\n        'circle-radius': 4.0,\r\n        'circle-color': fillColorScheme(),\r\n        \"circle-stroke-width\": 1,\r\n        \"circle-stroke-color\": 'black'\r\n\r\n        }\r\n}\r\n\r\nexport const bigFill = () => {\r\n    return {\r\n\r\n        'fill-color': fillColorScheme(),\r\n        'fill-opacity': 0.8,\r\n        'fill-outline-color': 'black'\r\n    }\r\n\r\n}\r\n\r\nexport const smallFill = () => {\r\n    return {\r\n        'fill-color': fillColorScheme(),\r\n        'fill-outline-color': 'black',\r\n        'fill-opacity': 0.8,\r\n\r\n    }\r\n}\r\n","import React from 'react';\nimport MyMap from './MyMap'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyMap />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}